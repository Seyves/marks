// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMark = `-- name: CreateMark :one
INSERT INTO mark DEFAULT VALUES
RETURNING id, name, contents, created_at
`

func (q *Queries) CreateMark(ctx context.Context) (Mark, error) {
	row := q.db.QueryRow(ctx, createMark)
	var i Mark
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Contents,
		&i.CreatedAt,
	)
	return i, err
}

const getMarks = `-- name: GetMarks :many
SELECT id, name, contents, created_at FROM mark
ORDER BY mark.created_at
`

func (q *Queries) GetMarks(ctx context.Context) ([]Mark, error) {
	rows, err := q.db.Query(ctx, getMarks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mark
	for rows.Next() {
		var i Mark
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Contents,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMarkContents = `-- name: UpdateMarkContents :exec
UPDATE mark
  SET contents = $2
WHERE id = $1
`

type UpdateMarkContentsParams struct {
	ID       pgtype.UUID `json:"id"`
	Contents string      `json:"contents"`
}

func (q *Queries) UpdateMarkContents(ctx context.Context, arg UpdateMarkContentsParams) error {
	_, err := q.db.Exec(ctx, updateMarkContents, arg.ID, arg.Contents)
	return err
}

const updateMarkName = `-- name: UpdateMarkName :exec
UPDATE mark
  SET name = $2
WHERE id = $1
`

type UpdateMarkNameParams struct {
	ID   pgtype.UUID `json:"id"`
	Name string      `json:"name"`
}

func (q *Queries) UpdateMarkName(ctx context.Context, arg UpdateMarkNameParams) error {
	_, err := q.db.Exec(ctx, updateMarkName, arg.ID, arg.Name)
	return err
}
